name: Deploy to DigitalOcean App Platform

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

env:
  # DigitalOcean App Platform configuration
  DO_APP_NAME: motion-index

jobs:
  # Build and test before deployment
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [api, web]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js (for Web)
        if: matrix.component == 'web'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: Web/package-lock.json
      
      - name: Set up Python (for API)
        if: matrix.component == 'api'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: API/requirements.txt
      
      # Web component tests
      - name: Install Web dependencies
        if: matrix.component == 'web'
        working-directory: ./Web
        run: npm ci
      
      - name: Build Web application
        if: matrix.component == 'web'
        working-directory: ./Web
        run: npm run build
        env:
          PUBLIC_API_URL: https://mock-api.example.com
          PUBLIC_SUPABASE_URL: https://mock.supabase.co
          PUBLIC_SUPABASE_ANON_KEY: mock-key
      
      - name: Run Web type check
        if: matrix.component == 'web'
        working-directory: ./Web
        run: npm run check
      
      - name: Run Web linting
        if: matrix.component == 'web'
        working-directory: ./Web
        run: npm run lint
      
      # API component tests
      - name: Install API dependencies
        if: matrix.component == 'api'
        working-directory: ./API
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run API syntax check
        if: matrix.component == 'api'
        working-directory: ./API
        run: python -m py_compile server.py
      
      - name: Test API imports
        if: matrix.component == 'api'
        working-directory: ./API
        run: |
          export PYTHONPATH=$PWD:$PYTHONPATH
          python -c "
          import sys; sys.path.insert(0, '.')
          from src.handlers.storage_handler import storage_handler
          from src.handlers.elasticsearch_handler import ElasticsearchHandler
          print('All imports successful')
          "

  # Deploy to DigitalOcean App Platform
  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.live_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Update app.yaml with repository info
        run: |
          # Update the app.yaml with correct repository information
          sed -i 's|repo: yourusername/Motion-Index|repo: ${{ github.repository }}|g' app.yaml
      
      - name: Deploy to DigitalOcean App Platform
        id: deploy
        run: |
          # Check if app exists
          if doctl apps list --format Name --no-header | grep -q "^${DO_APP_NAME}$"; then
            echo "Updating existing app: ${DO_APP_NAME}"
            APP_ID=$(doctl apps list --format ID,Name --no-header | grep "${DO_APP_NAME}" | awk '{print $1}')
            doctl apps update "${APP_ID}" --spec app.yaml --wait
            LIVE_URL=$(doctl apps get "${APP_ID}" --format LiveURL --no-header)
          else
            echo "Creating new app: ${DO_APP_NAME}"
            APP_ID=$(doctl apps create --spec app.yaml --format ID --no-header --wait)
            LIVE_URL=$(doctl apps get "${APP_ID}" --format LiveURL --no-header)
          fi
          
          echo "App deployed successfully!"
          echo "App ID: ${APP_ID}"
          echo "Live URL: ${LIVE_URL}"
          echo "live_url=${LIVE_URL}" >> $GITHUB_OUTPUT
      
      - name: Verify deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          # Health check for API
          API_URL="${{ steps.deploy.outputs.live_url }}"
          if [ ! -z "$API_URL" ]; then
            echo "Testing API health endpoint..."
            curl -f "${API_URL}/health" || echo "API health check failed"
          fi
      
      - name: Create deployment summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Application**: ${DO_APP_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "üåê **Live URL**: ${{ steps.deploy.outputs.live_url }}" >> $GITHUB_STEP_SUMMARY
          echo "üì¶ **Components**: API (Python/FastAPI), Web (SvelteKit)" >> $GITHUB_STEP_SUMMARY
          echo "üíæ **Storage**: DigitalOcean Spaces" >> $GITHUB_STEP_SUMMARY
          echo "üîç **Database**: Managed Elasticsearch" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Configure custom domain in DigitalOcean dashboard" >> $GITHUB_STEP_SUMMARY
          echo "2. Set up environment variables for production" >> $GITHUB_STEP_SUMMARY
          echo "3. Run PDF migration script: \`scripts/migrate_to_spaces.py\`" >> $GITHUB_STEP_SUMMARY

  # Notification job (optional)
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: Notify on success
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ Deployment succeeded!"
          echo "Live URL: ${{ needs.deploy.outputs.live_url }}"
      
      - name: Notify on failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs for more details."
          exit 1