openapi: 3.0.3
info:
  title: Motion Index Fiber API
  description: |
    High-performance legal document processing API for California public defenders.
    
    Built with Go and Fiber v2, featuring DigitalOcean cloud integration, AI-powered document classification, and comprehensive search capabilities.
    
    ## Features
    - Document upload and processing (PDF, DOCX, TXT, RTF)
    - AI-powered document classification using GPT-4
    - Full-text search with legal metadata filtering
    - DigitalOcean Spaces storage with CDN
    - JWT authentication via Supabase
    - Real-time document processing pipeline
    
    ## Authentication
    All protected endpoints require a valid JWT token in the `Authorization` header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    See the [Authentication Guide](./authentication.md) for detailed information.
    
    ## Error Handling
    The API uses structured error responses with consistent format:
    ```json
    {
      "success": false,
      "error": {
        "code": "ERROR_CODE",
        "message": "Human-readable error message",
        "details": {
          "additional": "context-specific information"
        }
      }
    }
    ```
    
    See the [Error Codes Reference](./error-codes.md) for all possible error codes.
  version: 1.0.0
  contact:
    name: Motion Index Support
    email: support@motion-index.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:6000
    description: Local development server
  - url: https://motion-index-api.ondigitalocean.app
    description: Production server (DigitalOcean App Platform)

paths:
  /health:
    get:
      tags:
        - Health
      summary: Basic health check
      description: Simple health check endpoint that returns server status
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                success: true
                data:
                  status: "healthy"
                  service: "motion-index-fiber"
                  timestamp: "2024-01-15T10:30:00Z"
                message: "Service is healthy"
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /health/detailed:
    get:
      tags:
        - Health
      summary: Detailed health check
      description: Comprehensive health check including all external service dependencies
      operationId: getDetailedHealth
      responses:
        '200':
          description: Detailed service status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedHealthResponse'
              example:
                success: true
                data:
                  service: "motion-index-fiber"
                  status: "healthy"
                  version: "1.0.0"
                  uptime: 3600
                  storage:
                    status: "healthy"
                    provider: "digitalocean-spaces"
                    region: "nyc3"
                  search:
                    status: "healthy"
                    provider: "digitalocean-opensearch"
                    index_count: 1
                  ai:
                    status: "healthy"
                    provider: "openai"
                    model: "gpt-4"
                message: "All systems operational"
        '503':
          description: One or more services are unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/search:
    post:
      tags:
        - Search
      summary: Search documents
      description: |
        Search through the legal document database with support for:
        - Full-text search across document content
        - Metadata filtering (court, judge, case type, date ranges)
        - Sorting and pagination
        - Aggregations for faceted search
        - Highlighting of search terms
      operationId: searchDocuments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
            examples:
              simple_search:
                summary: Simple text search
                value:
                  query: "motion to dismiss"
                  limit: 20
                  offset: 0
              filtered_search:
                summary: Search with filters
                value:
                  query: "habeas corpus"
                  filters:
                    court: ["Superior Court of California"]
                    document_type: ["Motion", "Brief"]
                    date_range:
                      start: "2023-01-01"
                      end: "2023-12-31"
                  sort:
                    field: "filing_date"
                    order: "desc"
                  limit: 10
                  offset: 0
                  include_aggregations: true
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '400':
          description: Invalid search request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Search service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/categorise:
    post:
      tags:
        - Documents
      summary: Upload and process document
      description: |
        Upload a legal document for processing. The system will:
        1. Extract text content from the document
        2. Classify the document type using AI
        3. Index the document for search
        4. Store the document in cloud storage
        
        Supported formats: PDF, DOCX, TXT, RTF
        
        Maximum file size: 50MB
      operationId: uploadDocument
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The document file to upload
                metadata:
                  type: string
                  description: JSON string containing document metadata
                  example: '{"court": "Superior Court", "case_number": "CV-2024-001"}'
                options:
                  type: string
                  description: JSON string containing processing options
                  example: '{"extract_text": true, "classify": true, "index": true}'
              required:
                - file
            encoding:
              file:
                contentType: application/pdf, application/vnd.openxmlformats-officedocument.wordprocessingml.document, text/plain, application/rtf
      responses:
        '200':
          description: Document processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentProcessResponse'
              example:
                success: true
                data:
                  document_id: "doc_123456"
                  filename: "motion_to_dismiss.pdf"
                  status: "processed"
                  classification:
                    document_type: "Motion"
                    confidence: 0.95
                    category: "Pretrial Motion"
                  extracted_text_length: 2547
                  storage_url: "https://nyc3.digitaloceanspaces.com/motion-index-docs/documents/doc_123456.pdf"
                  index_id: "motion-index-docs"
                  processing_time_ms: 1250
                message: "Document processed successfully"
        '400':
          description: Invalid file or request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unsupported file type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/documents/{document_id}:
    get:
      tags:
        - Documents
      summary: Get document by ID
      description: Retrieve document metadata and content information by ID
      operationId: getDocument
      parameters:
        - name: document_id
          in: path
          required: true
          schema:
            type: string
          description: Unique document identifier
          example: "doc_123456"
      responses:
        '200':
          description: Document information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Documents
      summary: Delete document
      description: Delete a document from storage and search index (requires authentication)
      operationId: deleteDocument
      security:
        - BearerAuth: []
      parameters:
        - name: document_id
          in: path
          required: true
          schema:
            type: string
          description: Unique document identifier
          example: "doc_123456"
      responses:
        '200':
          description: Document deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/update-metadata:
    post:
      tags:
        - Documents
      summary: Update document metadata
      description: Update metadata for an existing document (requires authentication)
      operationId: updateDocumentMetadata
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMetadataRequest'
            example:
              document_id: "doc_123456"
              metadata:
                court: "Superior Court of California, County of San Francisco"
                judge: "Hon. Jane Smith"
                case_number: "CV-2024-001234"
                case_name: "People v. Defendant"
                filing_date: "2024-01-15"
                document_type: "Motion"
                category: "Pretrial Motion"
                parties:
                  - "People of the State of California"
                  - "John Doe (Defendant)"
                attorneys:
                  - "Jane Attorney (Defense)"
                  - "Bob Prosecutor (DA)"
      responses:
        '200':
          description: Metadata updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/analyze-redactions:
    post:
      tags:
        - Documents
      summary: Analyze PDF redactions
      description: |
        Analyze a PDF document for redactions and provide detailed information about:
        - Location and dimensions of redacted areas
        - Page-by-page redaction analysis
        - Confidence scores for redaction detection
        - Suggestions for proper redaction practices
      operationId: analyzeRedactions
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: PDF file to analyze for redactions
                options:
                  type: string
                  description: JSON string containing analysis options
                  example: '{"detailed_analysis": true, "include_suggestions": true}'
              required:
                - file
            encoding:
              file:
                contentType: application/pdf
      responses:
        '200':
          description: Redaction analysis completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedactionAnalysisResponse'
        '400':
          description: Invalid file or not a PDF
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unsupported file type (must be PDF)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Analysis error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/document-stats:
    get:
      tags:
        - Statistics
      summary: Get document statistics
      description: Get overall statistics about the document collection
      operationId: getDocumentStats
      responses:
        '200':
          description: Document statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentStatsResponse'
              example:
                success: true
                data:
                  total_documents: 15432
                  total_size_bytes: 8934567234
                  document_types:
                    Motion: 5678
                    Brief: 3456
                    Order: 2345
                    Judgment: 1234
                    Other: 2719
                  courts:
                    "Superior Court of California": 12345
                    "Court of Appeal": 2345
                    "Supreme Court": 742
                  date_range:
                    earliest: "2020-01-01"
                    latest: "2024-01-15"
                  last_updated: "2024-01-15T10:30:00Z"
                message: "Statistics retrieved successfully"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/metadata-fields:
    get:
      tags:
        - Metadata
      summary: Get available metadata fields
      description: Get list of available metadata fields for filtering and search
      operationId: getMetadataFields
      responses:
        '200':
          description: Available metadata fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataFieldsResponse'
              example:
                success: true
                data:
                  fields:
                    court:
                      type: "string"
                      searchable: true
                      filterable: true
                      values:
                        - "Superior Court of California"
                        - "Court of Appeal"
                        - "Supreme Court of California"
                    document_type:
                      type: "string"
                      searchable: true
                      filterable: true
                      values:
                        - "Motion"
                        - "Brief"
                        - "Order"
                        - "Judgment"
                    filing_date:
                      type: "date"
                      searchable: false
                      filterable: true
                      range:
                        min: "2020-01-01"
                        max: "2024-01-15"
                    case_number:
                      type: "string"
                      searchable: true
                      filterable: true
                message: "Metadata fields retrieved successfully"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/batch/classify:
    post:
      tags:
        - Batch Processing
      summary: Start batch document classification
      description: |
        Start an asynchronous batch processing job to classify multiple documents.
        
        Features:
        - Process up to 1000 documents per batch
        - Asynchronous processing with job tracking
        - Progress monitoring and status updates
        - Support for both text input and document file paths
        - Comprehensive error handling and reporting
        
        Maximum documents per batch: 1000
      operationId: startBatchClassification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchClassifyRequest'
            examples:
              text_classification:
                summary: Classify documents with text content
                value:
                  documents:
                    - document_id: "doc_001"
                      text: "TO THE HONORABLE COURT: Defendant hereby moves..."
                    - document_id: "doc_002"
                      text: "BRIEF IN SUPPORT OF MOTION TO DISMISS..."
                  options:
                    priority: "high"
                    include_confidence: true
              file_classification:
                summary: Classify documents from storage paths
                value:
                  documents:
                    - document_id: "doc_003"
                      document_path: "documents/motion_to_dismiss.pdf"
                    - document_id: "doc_004"
                      document_path: "documents/brief_in_support.docx"
                  options:
                    extract_text: true
                    include_metadata: true
      responses:
        '202':
          description: Batch classification job started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchJobStartResponse'
              example:
                success: true
                data:
                  job_id: "batch_123456789"
                  status: "queued"
                  total_documents: 15
                  created_at: "2024-01-15T10:30:00Z"
                message: "Batch classification job started"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/batch/{job_id}/status:
    get:
      tags:
        - Batch Processing
      summary: Get batch job status
      description: Get the current status and progress of a batch processing job
      operationId: getBatchJobStatus
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
          description: Batch job identifier
          example: "batch_123456789"
      responses:
        '200':
          description: Job status and progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchJobStatusResponse'
              example:
                success: true
                data:
                  id: "batch_123456789"
                  type: "classification"
                  status: "running"
                  progress:
                    total_documents: 100
                    processed_count: 45
                    success_count: 42
                    error_count: 2
                    skipped_count: 1
                    percent_complete: 45.0
                    estimated_duration: "2m 30s"
                  created_at: "2024-01-15T10:30:00Z"
                  updated_at: "2024-01-15T10:32:15Z"
                message: "Job status retrieved successfully"
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/batch/{job_id}/results:
    get:
      tags:
        - Batch Processing
      summary: Get batch job results
      description: Get the complete results of a finished batch processing job
      operationId: getBatchJobResults
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
          description: Batch job identifier
          example: "batch_123456789"
      responses:
        '200':
          description: Completed job results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchJobResultsResponse'
              example:
                success: true
                data:
                  job_id: "batch_123456789"
                  status: "completed"
                  progress:
                    total_documents: 100
                    processed_count: 100
                    success_count: 95
                    error_count: 3
                    skipped_count: 2
                    percent_complete: 100.0
                  results:
                    - document_id: "doc_001"
                      document_path: "documents/motion.pdf"
                      status: "success"
                      classification_result:
                        document_type: "Motion"
                        confidence: 0.95
                        category: "Pretrial Motion"
                      processed_at: "2024-01-15T10:31:00Z"
                    - document_id: "doc_002"
                      document_path: "documents/brief.docx"
                      status: "error"
                      error: "Failed to extract text: unsupported format"
                      processed_at: "2024-01-15T10:31:15Z"
                  completed_at: "2024-01-15T10:35:00Z"
                message: "Job results retrieved successfully"
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Job not yet completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/batch/{job_id}:
    delete:
      tags:
        - Batch Processing
      summary: Cancel batch job
      description: Cancel a running or queued batch processing job
      operationId: cancelBatchJob
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
          description: Batch job identifier
          example: "batch_123456789"
      responses:
        '200':
          description: Job cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  job_id: "batch_123456789"
                  status: "cancelled"
                message: "Job cancelled successfully"
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token obtained from Supabase authentication.
        
        Include in requests as: `Authorization: Bearer <your-jwt-token>`

  schemas:
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          description: Response data (structure varies by endpoint)
        message:
          type: string
          description: Human-readable success message
          example: "Operation completed successfully"
      required:
        - success

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              description: Machine-readable error code
              example: "VALIDATION_ERROR"
            message:
              type: string
              description: Human-readable error message
              example: "Invalid input parameters"
            details:
              type: object
              description: Additional error context and details
              additionalProperties: true
          required:
            - code
            - message
      required:
        - success
        - error

    HealthResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                status:
                  type: string
                  enum: [healthy, unhealthy]
                service:
                  type: string
                  example: "motion-index-fiber"
                timestamp:
                  type: string
                  format: date-time
              required:
                - status
                - service
                - timestamp

    DetailedHealthResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                service:
                  type: string
                  example: "motion-index-fiber"
                status:
                  type: string
                  enum: [healthy, degraded, unhealthy]
                version:
                  type: string
                  example: "1.0.0"
                uptime:
                  type: integer
                  description: Uptime in seconds
                  example: 3600
                storage:
                  $ref: '#/components/schemas/ServiceHealth'
                search:
                  $ref: '#/components/schemas/ServiceHealth'
                ai:
                  $ref: '#/components/schemas/ServiceHealth'
              required:
                - service
                - status
                - storage
                - search

    ServiceHealth:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        provider:
          type: string
          example: "digitalocean-spaces"
        last_check:
          type: string
          format: date-time
        response_time_ms:
          type: integer
          example: 150
        error:
          type: string
          description: Error message if unhealthy
      required:
        - status
        - provider

    SearchRequest:
      type: object
      properties:
        query:
          type: string
          description: Search query text
          example: "motion to dismiss"
        filters:
          type: object
          properties:
            court:
              type: array
              items:
                type: string
              example: ["Superior Court of California"]
            judge:
              type: array
              items:
                type: string
              example: ["Hon. Jane Smith"]
            document_type:
              type: array
              items:
                type: string
              example: ["Motion", "Brief"]
            category:
              type: array
              items:
                type: string
              example: ["Pretrial Motion"]
            case_number:
              type: array
              items:
                type: string
              example: ["CV-2024-001"]
            date_range:
              type: object
              properties:
                start:
                  type: string
                  format: date
                  example: "2023-01-01"
                end:
                  type: string
                  format: date
                  example: "2023-12-31"
        sort:
          type: object
          properties:
            field:
              type: string
              enum: [relevance, filing_date, case_number, document_type]
              default: relevance
            order:
              type: string
              enum: [asc, desc]
              default: desc
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
          description: Number of results to return
        offset:
          type: integer
          minimum: 0
          default: 0
          description: Number of results to skip
        include_aggregations:
          type: boolean
          default: false
          description: Include aggregations for faceted search
        include_highlights:
          type: boolean
          default: true
          description: Include highlighted search terms

    SearchResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                total:
                  type: integer
                  description: Total number of matching documents
                  example: 1247
                results:
                  type: array
                  items:
                    $ref: '#/components/schemas/DocumentResult'
                aggregations:
                  type: object
                  description: Search aggregations (if requested)
                  properties:
                    document_types:
                      type: array
                      items:
                        type: object
                        properties:
                          key:
                            type: string
                          doc_count:
                            type: integer
                    courts:
                      type: array
                      items:
                        type: object
                        properties:
                          key:
                            type: string
                          doc_count:
                            type: integer
                query_time_ms:
                  type: integer
                  description: Query execution time in milliseconds
                  example: 23
              required:
                - total
                - results

    DocumentResult:
      type: object
      properties:
        document_id:
          type: string
          example: "doc_123456"
        filename:
          type: string
          example: "motion_to_dismiss.pdf"
        title:
          type: string
          example: "Motion to Dismiss - Lack of Jurisdiction"
        content_preview:
          type: string
          description: First 200 characters of document content
          example: "TO THE HONORABLE COURT: Defendant hereby moves this Court to dismiss the above-entitled action for lack of subject matter jurisdiction..."
        metadata:
          $ref: '#/components/schemas/DocumentMetadata'
        highlights:
          type: object
          description: Highlighted search terms
          additionalProperties:
            type: array
            items:
              type: string
        score:
          type: number
          format: float
          description: Relevance score
          example: 0.95
        storage_url:
          type: string
          format: uri
          description: URL to access the document
          example: "https://nyc3.digitaloceanspaces.com/motion-index-docs/documents/doc_123456.pdf"
      required:
        - document_id
        - filename
        - metadata

    DocumentMetadata:
      type: object
      properties:
        court:
          type: string
          example: "Superior Court of California, County of San Francisco"
        judge:
          type: string
          example: "Hon. Jane Smith"
        case_number:
          type: string
          example: "CV-2024-001234"
        case_name:
          type: string
          example: "People v. Defendant"
        filing_date:
          type: string
          format: date
          example: "2024-01-15"
        document_type:
          type: string
          example: "Motion"
        category:
          type: string
          example: "Pretrial Motion"
        parties:
          type: array
          items:
            type: string
          example: ["People of the State of California", "John Doe (Defendant)"]
        attorneys:
          type: array
          items:
            type: string
          example: ["Jane Attorney (Defense)", "Bob Prosecutor (DA)"]
        tags:
          type: array
          items:
            type: string
          example: ["jurisdiction", "motion to dismiss", "pretrial"]
        confidential:
          type: boolean
          default: false
        redacted:
          type: boolean
          default: false

    DocumentProcessResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                document_id:
                  type: string
                  example: "doc_123456"
                filename:
                  type: string
                  example: "motion_to_dismiss.pdf"
                status:
                  type: string
                  enum: [processed, failed, processing]
                  example: "processed"
                classification:
                  type: object
                  properties:
                    document_type:
                      type: string
                      example: "Motion"
                    confidence:
                      type: number
                      format: float
                      example: 0.95
                    category:
                      type: string
                      example: "Pretrial Motion"
                extracted_text_length:
                  type: integer
                  description: Length of extracted text in characters
                  example: 2547
                storage_url:
                  type: string
                  format: uri
                  example: "https://nyc3.digitaloceanspaces.com/motion-index-docs/documents/doc_123456.pdf"
                index_id:
                  type: string
                  example: "motion-index-docs"
                processing_time_ms:
                  type: integer
                  example: 1250
              required:
                - document_id
                - filename
                - status

    DocumentResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                document_id:
                  type: string
                  example: "doc_123456"
                filename:
                  type: string
                  example: "motion_to_dismiss.pdf"
                content_type:
                  type: string
                  example: "application/pdf"
                file_size:
                  type: integer
                  description: File size in bytes
                  example: 1048576
                metadata:
                  $ref: '#/components/schemas/DocumentMetadata'
                storage_url:
                  type: string
                  format: uri
                  example: "https://nyc3.digitaloceanspaces.com/motion-index-docs/documents/doc_123456.pdf"
                created_at:
                  type: string
                  format: date-time
                  example: "2024-01-15T10:30:00Z"
                updated_at:
                  type: string
                  format: date-time
                  example: "2024-01-15T10:30:00Z"
              required:
                - document_id
                - filename
                - content_type
                - metadata

    UpdateMetadataRequest:
      type: object
      properties:
        document_id:
          type: string
          description: Unique document identifier
          example: "doc_123456"
        metadata:
          $ref: '#/components/schemas/DocumentMetadata'
      required:
        - document_id
        - metadata

    RedactionAnalysisResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                document_id:
                  type: string
                  example: "doc_123456"
                filename:
                  type: string
                  example: "sensitive_document.pdf"
                total_pages:
                  type: integer
                  example: 15
                total_redactions:
                  type: integer
                  example: 23
                pages:
                  type: array
                  items:
                    type: object
                    properties:
                      page_number:
                        type: integer
                        example: 1
                      redaction_count:
                        type: integer
                        example: 3
                      redactions:
                        type: array
                        items:
                          type: object
                          properties:
                            x:
                              type: number
                              format: float
                              description: X coordinate of redaction
                            y:
                              type: number
                              format: float
                              description: Y coordinate of redaction
                            width:
                              type: number
                              format: float
                              description: Width of redaction
                            height:
                              type: number
                              format: float
                              description: Height of redaction
                            confidence:
                              type: number
                              format: float
                              description: Confidence score for redaction detection
                              example: 0.95
                analysis_time_ms:
                  type: integer
                  example: 750
                suggestions:
                  type: array
                  items:
                    type: string
                  example: ["Review page 3 for potential incomplete redactions", "Consider redacting case numbers on page 7"]
              required:
                - total_pages
                - total_redactions
                - pages

    DocumentStatsResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                total_documents:
                  type: integer
                  example: 15432
                total_size_bytes:
                  type: integer
                  example: 8934567234
                document_types:
                  type: object
                  additionalProperties:
                    type: integer
                  example:
                    Motion: 5678
                    Brief: 3456
                    Order: 2345
                courts:
                  type: object
                  additionalProperties:
                    type: integer
                  example:
                    "Superior Court of California": 12345
                    "Court of Appeal": 2345
                date_range:
                  type: object
                  properties:
                    earliest:
                      type: string
                      format: date
                      example: "2020-01-01"
                    latest:
                      type: string
                      format: date
                      example: "2024-01-15"
                last_updated:
                  type: string
                  format: date-time
                  example: "2024-01-15T10:30:00Z"
              required:
                - total_documents
                - total_size_bytes
                - document_types
                - courts
                - date_range
                - last_updated

    MetadataFieldsResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                fields:
                  type: object
                  additionalProperties:
                    type: object
                    properties:
                      type:
                        type: string
                        enum: [string, integer, float, boolean, date, array]
                      searchable:
                        type: boolean
                      filterable:
                        type: boolean
                      values:
                        type: array
                        items:
                          type: string
                        description: Available values for enum fields
                      range:
                        type: object
                        properties:
                          min:
                            type: string
                          max:
                            type: string
                        description: Range for numeric/date fields
              required:
                - fields

    BatchClassifyRequest:
      type: object
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/BatchDocumentInput'
          minItems: 1
          maxItems: 1000
          description: List of documents to classify (maximum 1000)
        options:
          type: object
          additionalProperties: true
          description: Processing options
          example:
            priority: "high"
            include_confidence: true
            extract_text: true
      required:
        - documents

    BatchDocumentInput:
      type: object
      properties:
        document_id:
          type: string
          description: Unique identifier for the document
          example: "doc_123456"
        document_path:
          type: string
          description: Path to document in storage (alternative to text)
          example: "documents/motion_to_dismiss.pdf"
        text:
          type: string
          description: Document text content (alternative to document_path)
          example: "TO THE HONORABLE COURT: Defendant hereby moves..."
      required:
        - document_id
      oneOf:
        - required: [document_path]
        - required: [text]

    BatchJobStartResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                job_id:
                  type: string
                  description: Unique batch job identifier
                  example: "batch_123456789"
                status:
                  type: string
                  enum: [queued, running, completed, failed, cancelled]
                  example: "queued"
                total_documents:
                  type: integer
                  description: Total number of documents to process
                  example: 15
                created_at:
                  type: string
                  format: date-time
                  example: "2024-01-15T10:30:00Z"
              required:
                - job_id
                - status
                - total_documents
                - created_at

    BatchJobStatusResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/BatchJob'

    BatchJobResultsResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                job_id:
                  type: string
                  example: "batch_123456789"
                status:
                  type: string
                  enum: [completed, failed, cancelled]
                progress:
                  $ref: '#/components/schemas/BatchProgress'
                results:
                  type: array
                  items:
                    $ref: '#/components/schemas/BatchResult'
                completed_at:
                  type: string
                  format: date-time
                  example: "2024-01-15T10:35:00Z"
              required:
                - job_id
                - status
                - progress
                - results

    BatchJob:
      type: object
      properties:
        id:
          type: string
          description: Unique job identifier
          example: "batch_123456789"
        type:
          type: string
          description: Type of batch job
          example: "classification"
        status:
          type: string
          enum: [queued, running, completed, failed, cancelled]
          description: Current job status
        progress:
          $ref: '#/components/schemas/BatchProgress'
        results:
          type: array
          items:
            $ref: '#/components/schemas/BatchResult'
          description: Results array (populated during processing)
        error:
          type: string
          description: Error message if job failed
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:32:15Z"
        completed_at:
          type: string
          format: date-time
          description: Completion timestamp (if completed)
          example: "2024-01-15T10:35:00Z"
        options:
          type: object
          additionalProperties: true
          description: Job processing options
      required:
        - id
        - type
        - status
        - progress
        - created_at
        - updated_at

    BatchProgress:
      type: object
      properties:
        total_documents:
          type: integer
          description: Total number of documents in the batch
          example: 100
        processed_count:
          type: integer
          description: Number of documents processed so far
          example: 45
        success_count:
          type: integer
          description: Number of successfully processed documents
          example: 42
        error_count:
          type: integer
          description: Number of documents that failed processing
          example: 2
        skipped_count:
          type: integer
          description: Number of documents that were skipped
          example: 1
        percent_complete:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Percentage of completion
          example: 45.0
        estimated_duration:
          type: string
          description: Estimated time remaining
          example: "2m 30s"
      required:
        - total_documents
        - processed_count
        - success_count
        - error_count
        - skipped_count
        - percent_complete

    BatchResult:
      type: object
      properties:
        document_id:
          type: string
          description: Document identifier
          example: "doc_123456"
        document_path:
          type: string
          description: Document storage path
          example: "documents/motion.pdf"
        status:
          type: string
          enum: [success, error, skipped]
          description: Processing status for this document
        classification_result:
          type: object
          description: Classification results (if successful)
          properties:
            document_type:
              type: string
              example: "Motion"
            confidence:
              type: number
              format: float
              example: 0.95
            category:
              type: string
              example: "Pretrial Motion"
        error:
          type: string
          description: Error message (if failed)
          example: "Failed to extract text: unsupported format"
        processed_at:
          type: string
          format: date-time
          description: When this document was processed
          example: "2024-01-15T10:31:00Z"
      required:
        - document_id
        - status
        - processed_at

tags:
  - name: Health
    description: Health check and system status endpoints
  - name: Search
    description: Document search and discovery
  - name: Documents
    description: Document upload, processing, and management
  - name: Batch Processing
    description: Asynchronous batch processing operations
  - name: Statistics
    description: Collection statistics and analytics
  - name: Metadata
    description: Metadata field information and management

externalDocs:
  description: Full API Documentation
  url: https://github.com/your-org/motion-index-fiber/tree/main/docs/api